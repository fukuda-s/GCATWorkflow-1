configfile: "config.yml"

rule all:
    input:
        "join/all.txt"

rule bam_tofastq:
    input:
        lambda wildcards: config["bam_tofastq"][wildcards.sample]
    output:
        "fastq/{sample}/pass.txt"
    params:
        script = "script/{sample}/singularity_bam_tofastq.sh",
        yaml = "script/{sample}/conf_bam_tofastq.yml"
    shell:
        "gcat_runner {params.script} {params.yaml}"

rule fastq:
    input:
        r1=lambda wildcards: config["fastq_r1"][wildcards.sample],
        r2=lambda wildcards: config["fastq_r2"][wildcards.sample]
    output:
        "fastq/{sample}/pass.txt"
    run:
        sample = output[0].split("/")[1]
        import os
        link_dir = 'fastq/%s' % (sample)
        os.makedirs(link_dir, exist_ok=True)
        for (count, target_fastq) in enumerate(input.r1):
            fastq_prefix, ext = os.path.splitext(target_fastq)
            link = '%s/%d_%d%s' % (link_dir, count+1, 1, ext)
            if not os.path.exists(link):
                os.symlink(target_fastq, link)
        for (count, target_fastq) in enumerate(input.r2):
            fastq_prefix, ext = os.path.splitext(target_fastq)
            link = '%s/%d_%d%s' % (link_dir, count+1, 2, ext)
            if not os.path.exists(link):
                os.symlink(target_fastq, link)
        open(output[0], "w").close()

rule bam_import:
    input:
        lambda wildcards: config["bam_import"][wildcards.sample]
    output:
        "fastq/{sample}/pass.txt",
        "star/{sample}/{sample}.Aligned.sortedByCoord.out.bam",
        "star/{sample}/{sample}.Aligned.sortedByCoord.out.bam.bai",
        "star/{sample}/{sample}.Chimeric.out.sam",
        "star/{sample}/{sample}.Chimeric.out.junction",
    run:
        bam_postfix = ".Aligned.sortedByCoord.out.bam"
        bai_postfix = ".Aligned.sortedByCoord.out.bam.bai"
        subdir = "star"
        
        import os
        sample = output[0].split("/")[1]
        link_dir = '%s/%s' % (subdir, sample)
        os.makedirs(link_dir, exist_ok=True)
        bam = str(input)
        prefix, ext = os.path.splitext(bam)
        if ext == ".bam":
            bai = ".bai"
        elif ext == ".cram":
            bai = ".crai"
        linked_bam = link_dir +'/'+ sample + bam_postfix
        linked_bai = link_dir +'/'+ sample + bai_postfix

        if not os.path.exists(linked_bam):
            os.symlink(bam, linked_bam)
        if not os.path.exists(linked_bai):
            if (os.path.exists(bam + bai)):
                os.symlink(bam + bai, linked_bai)
            elif (os.path.exists(prefix + bai)):
                os.symlink(prefix + bai, linked_bai)
        open(output[0], "w").close()

rule star:
    input:
        lambda wildcards: config["aln_samples"][wildcards.sample],
    output:
        "star/{sample}/{sample}.Aligned.sortedByCoord.out.bam",
        "star/{sample}/{sample}.Aligned.sortedByCoord.out.bam.bai",
        "star/{sample}/{sample}.Chimeric.out.sam",
        "star/{sample}/{sample}.Chimeric.out.junction",
    params:
        script = "script/{sample}/singularity_star_alignment.sh",
        yaml = "script/{sample}/conf_star_alignment.yml"
    shell:
        "gcat_runner {params.script} {params.yaml}"

rule star_fusion:
    input:
        lambda wildcards: config["star_fusion_samples"][wildcards.sample],
    output:
        "star_fusion/{sample}/{sample}.fusion_predictions.abridged.tsv"
    params:
        script = "script/{sample}/singularity_star_fusion.sh",
        yaml = "script/{sample}/conf_star_fusion.yml"
    shell:
        "gcat_runner {params.script} {params.yaml}"

rule fusionfusion_count:
    input:
        lambda wildcards: config["fusionfusion_count_samples"][wildcards.sample],
    output:
        "fusionfusion/{sample}/{sample}.Chimeric.count"
    params:
        script = "script/{sample}/singularity_fusionfusion.sh",
        yaml = "script/{sample}/conf_fusionfusion.yml"
    shell:
        "gcat_runner {params.script} {params.yaml}"

rule fusionfusion_merge:
    input:
        lambda wildcards: config["fusionfusion_merge_samples"][wildcards.sample],
    output:
        "fusionfusion/{sample}/{sample}.merged.Chimeric.count"
    params:
        script = "script/{sample}/singularity_fusionfusion.sh",
        yaml = "script/{sample}/conf_fusionfusion.yml"
    shell:
        "gcat_runner {params.script} {params.yaml}"

rule fusionfusion:
    input:
        lambda wildcards: config["fusionfusion_samples"][wildcards.sample],
    output:
        "fusionfusion/{sample}/{sample}.genomonFusion.result.filt.txt"
    params:
        script = "script/{sample}/singularity_fusionfusion.sh",
        yaml = "script/{sample}/conf_fusionfusion.yml"
    shell:
        "gcat_runner {params.script} {params.yaml}"

rule expression:
    input:
        lambda wildcards: config["expression_samples"][wildcards.sample],
    output:
        "expression/{sample}/{sample}.txt.fpkm"
    params:
        script = "script/{sample}/singularity_expression.sh",
        yaml = "script/{sample}/conf_expression.yml"
    shell:
        "gcat_runner {params.script} {params.yaml}"

rule ir_count:
    input:
        lambda wildcards: config["ir_count_samples"][wildcards.sample],
    output:
        "ir_count/{sample}/{sample}.txt.fpkm"
    params:
        script = "script/{sample}/singularity_ir_count.sh",
        yaml = "script/{sample}/conf_ir_count.yml"
    shell:
        "gcat_runner {params.script} {params.yaml}"

rule iravnet:
    input:
        lambda wildcards: config["iravnet_samples"][wildcards.sample],
    output:
        "iravnet/{sample}/{sample}.txt.fpkm"
    params:
        script = "script/{sample}/singularity_iravnet.sh",
        yaml = "script/{sample}/conf_iravnet.yml"
    shell:
        "gcat_runner {params.script} {params.yaml}"

rule kalisto:
    input:
        lambda wildcards: config["kalisto_samples"][wildcards.sample],
    output:
        "kalisto/{sample}/{sample}.txt.fpkm"
    params:
        script = "script/{sample}/singularity_kalisto.sh",
        yaml = "script/{sample}/conf_kalisto.yml"
    shell:
        "gcat_runner {params.script} {params.yaml}"

rule join:
    input:
        ["{dataset}".format(dataset=dataset) for dataset in config["output_files"]]
    output:
        "join/all.txt"
    shell:
        "cat {input} > {output}"

